plugins {
    id 'application'
    id 'java'
}

sourceCompatibility = '1.6'

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) { // compile-time options:
        options.compilerArgs << '-Xdiags:verbose'
        options.compilerArgs << '-Xlint:unchecked'
        options.deprecation = true
        options.encoding = 'UTF-8'
    }
    tasks.withType(JavaExec) { // runtime options:
        classpath sourceSets.main.runtimeClasspath
        //debug true
        enableAssertions true
        //jvmArgs '-verbose:gc'
        //jvmArgs '-Xbatch'
        //jvmArgs '-Xms512m', '-Xmx512m'
        //jvmArgs '-XX:+PrintCompilation'
        jvmArgs '-XX:+UseConcMarkSweepGC'
        //jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
    }
}

// select one version of the Engine
//ext.jmonkeyengineVersion = '3.2.0-stable' // from jcenter
//ext.jmonkeyengineVersion = '3.2.1-stable' // from jcenter
//ext.jmonkeyengineVersion = '3.2.2-stable' // from jcenter
//ext.jmonkeyengineVersion = '3.2.3-stable' // from jcenter
ext.jmonkeyengineVersion = '3.2.4-stable' // from jcenter
//ext.jmonkeyengineVersion = '3.3.0-alpha1' // from jcenter
//ext.jmonkeyengineVersion = '3.3.0-alpha2' // from jcenter
//ext.jmonkeyengineVersion = '3.3.0-alpha5' // from jcenter
//ext.jmonkeyengineVersion = '3.3.0-beta1' // from jcenter
//ext.jmonkeyengineVersion = '3.3.0-SNAPSHOT' // from mavenLocal

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
mainClassName = 'jme3test.helloworld.HelloCollision'
if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}
jar.manifest.attributes('Main-Class': mainClassName)

repositories {
    //mavenLocal()
    jcenter()
    // Read more about repositories here:
    //   https://docs.gradle.org/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
    // You can read more about how to add dependencies here:
    //   https://docs.gradle.org/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies

    // from jcenter (or mavenLocal) repositories:
    implementation "org.jmonkeyengine:jme3-core:$jmonkeyengineVersion"
    implementation "org.jmonkeyengine:jme3-bullet:$jmonkeyengineVersion"
    runtimeOnly "org.jmonkeyengine:jme3-bullet-native:$jmonkeyengineVersion"
    runtimeOnly "org.jmonkeyengine:jme3-desktop:$jmonkeyengineVersion"
    runtimeOnly "org.jmonkeyengine:jme3-plugins:$jmonkeyengineVersion"

    // select one version of LWJGL (from jcenter or mavenLocal)
    runtimeOnly "org.jmonkeyengine:jme3-lwjgl:$jmonkeyengineVersion"
    //runtimeOnly "org.jmonkeyengine:jme3-lwjgl3:$jmonkeyengineVersion"
}

// cleanup tasks
clean.dependsOn('cleanDLLs', 'cleanLogs', 'cleanSOs')
task cleanDLLs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dll')
}
task cleanLogs(type: Delete) {
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
task cleanSOs(type: Delete) {
    delete fileTree(dir: '.', include: '*.so')
}